meta {{}}
default-formatter raw

<h1>Introducing JSON Template</h1>

<p><a href="http://code.google.com/p/json-template/">JSON Template</a> is a minimal
but powerful templating language, currently implemented in <i>both</i>
<a href="http://python.org">Python</a> and 
<a href="http://en.wikipedia.org/wiki/JavaScript">JavaScript</a>.

<p>Since there are over one bajillion template languages for Python alone, it
deserves some explanation.  But first here are some examples.

<h3>Simple example</h3>

<blockquote>
<pre>>>> import jsontemplate
>>> jsontemplate.expand('Hello <span style="color: green">{name}</span>', {'<span style="color: green">name</span>': 'world'})</span>
'Hello world'</pre>
</blockquote>

<p>This Python example should look familiar to many people.*  The JavaScript
version is a straightforward translation of this API.

<h3>Full Example</h3>

<p>To read this example, keep in mind the following:

<ul>

<li>A variable can be <b>substituted</b> by surrounding its name with curly
braces: <code>{}</code></li>

<li>A <b>section</b> is a piece of the template that may be either present or
absent in the output -- something you would decide using an <b>if statement</b>
in most template languages.  A <span>section</span> more or less corresponds to
a JSON <b>node</b> -- that is, either a dictionary, list, or atom (string, int,
etc.).  In the example, the section is only shown if the key
<code>content-results</code> appears in the dictionary.</li>

<li>A <b>repeated section</b> is a piece of the template that may be present 0 or
more times in the output.  It more or less corresponds to a JSON <b>array</b> --
what you would iterate over using a 'for loop' for in most template
languages.</li>

</ul>

<p>These few constructs are surprisingly powerful.

<p>The following example uses <i>most</i> of the language, but not all.

{{example1}}


<h3>Motivation</h3>

<p> There are a few problems with the state of the art:

<ul>

  <li>Nearly all template languages are inexpressive and ill-specified
  procedural languages.  That is, they reinvent things like for loops, if
  statements, and expressions poorly.  A notable exception is <a
  href="http://code.google.com/p/google-ctemplate/">google-ctemplate</a>, a
  <i>declarative</i> language which runs <a
  href="http://google.com/">google.com</a>, no less, and JSON Template is
  strongly influenced by it.</li>

  <li>Template languages grow "hairs" over time, and thus become bound to a
  specific implementation and a specific implementation language (e.g. Java,
  Python).  Here is <a
  href="http://www.reddit.com/r/programming/comments/7zobf/five_languages_in_seven_lines_or_how_not_to_do/">a
  good example</a> of the "smell" I'm talking about.  </li>
  
  <li>AJAX programming makes client side templating more important.  I'd like to
  use the same system on both the client and the server.</li>
  
  <li><b>Every</b> successful website needs an API.  That's almost the
  definition of success -- people have put their important information in your
  site, and they need to get it out through means other than a browser.
  However, bolting an API on top of a web app not architected for it can result
  in fragile code, or at least unwanted duplication. <a
  href="http://json.org/">JSON</a> is a common choice for APIs.</li>
  
</ul>

<h3>Design</h3>

<p><a href="http://code.google.com/p/json-template/">JSON Template</a> addresses
these issues with the following design choices:

<p><b>JSON is the "data dictionary" format.</b>

<p>This has a number of consequences.  One small but surprisingly useful
consequence is that you can serialize your data dictionaries to files, which is
useful for testing, internationalization, and a few more things I haven't
thought of.

<p>A more important consequence is that you use your programming language, rather
than the template system, for application logic.  Every language has a way to
create JSON-like structures.  You can use your language's features for
manipulating dictionaries, arrays, and strings.  In dynamic languaegs like
Python and JavaScript, this is especially powerful.

<p>Thus, there's a very simple programming pattern for "Web 2.0"
sites:

<ol>

<li>Create a JSON structure dictionary in response to an HTTP request.</li>

<li>If say <code>?format=json</code> is in the
URL, then output the raw JSON.  </li><li>If not, combine the JSON with a
Template string and output an HTML page (or Atom feed, etc.).
</li>
</ol>

<p>In this way, <a href="http://code.google.com/p/json-template/">JSON
Template</a> is the <b>complement</b> of JSON. When you use a template
language to express program logic, this one-to-one correspondence between
human-consumable data and machine-consumable data is hard to achieve.

<p><b>The language is deliberately small, and it is declarative rather than
procedural.</b>

<p>It's intended to be <b>easily reimplemented </b>in multiple languages.
Right now there's a JavaScript and a Python implementation -- each 500-ish lines
of code in a single file -- with with <b>no dependencies</b>.  And they both
<b>pass the same tests</b>!  I'm hoping that people will contribute more
implementations (Java, Ruby, PHP, etc.), which can be easily verified against
these tests.

<h3>More Features</h3>

<ul>
<li>Comes with a deafult set of "formatters", so it's easy to get
escaping/security right.</li>
<li>Extensible with your own application-specific formatters</li>
<li>A small degree of customizable syntax makes it appropriate for many problem
domains (not just web programming).</li>

</ul>

<p>Despite being simple and minimal, it's still powerful.  See the <a
href="http://code.google.com/p/json-template/wiki/Features">Features wiki
page</a> for more details.

<h3>License</h3>

<p>I picked the <a href="http://www.apache.org/licenses/LICENSE-2.0.html">Apache
2.0</a> license for maximum compatibility with liberal open
source licenses, copyleft licenses, and proprietary software.

<h3>Feedback</h3>

<p><a href="http://code.google.com/p/json-template/issues/list">File bugs</a> or
send mail to the <a href="http://groups.google.com/group/json-template">mailing
list</a>.

<p>As mentioned, I've kept the language minimal on purpose.  There are a couple
more features that I may want to add, so feedback is useful.

<p style="font-size: small;">* The {} syntax for variable substitution seems to be getting popular.  It's
used in <a href="http://www.python.org/dev/peps/pep-3101/">Python 3.0
string formatting</a>, <a href="http://bitworking.org/news/URI_Templates">URI
templates</a>, <a href="http://goessner.net/articles/jsont/">JsonT</a>, etc.

